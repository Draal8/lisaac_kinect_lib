Section Header
  + name := FRAME;
  
Section Inherit
  - parent_object:OBJECT := OBJECT;
  - parent_kinect:KINECT := KINECT;

Section Private
  //main stuff
  /*+ p_registered:POINTER;
  + p_rgb:POINTER;
  + p_depth:POINTER;*/
  - rgb_:INTEGER := 1;  ///< enum Type {Color = 1, Ir = 2, Depth = 4}
  - ir_:INTEGER := 2;
  - depth_:INTEGER := 4;
  + kinect:KINECT := KINECT;
  - kinect_set ki:KINECT <- ( kinect := ki; );
  
  - init_frames <-
  (`libfreenect2::Frame *rgb = frames[libfreenect2::Frame::Color];
    libfreenect2::Frame *ir = frames[libfreenect2::Frame::Ir];
    libfreenect2::Frame *depth = frames[libfreenect2::Frame::Depth];
    libfreenect2::Frame undistorted(512, 424, 4), registered(512, 424, 4)`;
    /*p_rgb := `rgb`:POINTER;
    p_depth := `depth`:POINTER;
    p_registered := `&registered`:POINTER;*/
  );
  
  //graphics
  + draw pen:PEN to (x,y:REAL_32) <- ( "'draw to' function not defined\n".print; );
  - draw_mouse p:PEN <- //essential otherwise we won't have the video
  ( + t:TOUCH;
    p.begin_path;
    (p.touch.lower).to (p.touch.upper) do { i:INTEGER;
      t := p.touch.item i;
      (t.is_pressed).if {
        p.circle (t.x,t.y) radius 100;
        p.stroke_color (COLOR.rgb (255,255,255));
        p.stroke;
      };
    };
  );
  
  - use_pen pen:PEN to (x,y:REAL_32) size size:INTEGER <-
  ( + p:PAINT;
    + imgw,imgh:INTEGER;
    + iw, ih:REAL_32;
    draw_mouse pen;
    (frame_img != -1).if {
      (imgw,imgh) := pen.image_size frame_img;
      (iw, ih) := (size, size * imgh / imgw);
      p := PAINT.create_pattern (x,y) size (iw,ih) img_id frame_img angle 0 alpha 1;
      pen.begin_path;
      pen.rect (x,y) size (imgw,imgh);
      pen.fill_paint p;
      pen.fill;
      p.free;
    };
  );
  
  //Others
  - seuillage_hysteresis old_array:NATIVE_ARRAY UINTEGER_32 :NATIVE_ARRAY UINTEGER_32 <-
  ( + new_array:NATIVE_ARRAY UINTEGER_32;
    new_array := NATIVE_ARRAY UINTEGER_32.create (512*424);
    0.to (512*424) do { i:INTEGER;
      (old_array.item i < 800).if {
        new_array.put 0 to i;
      } else {
        new_array.put (old_array.item i) to i;
      };
    };
    new_array
  );
    
  - seuillage_hysteresis_r old_array:NATIVE_ARRAY REAL_32 :NATIVE_ARRAY REAL_32 <-
  ( + new_array:NATIVE_ARRAY REAL_32;
    new_array := NATIVE_ARRAY REAL_32.create (512*424);
    0.to (512*424) do { i:INTEGER;
      (old_array.item i < 800).if {
        new_array.put 0 to i;
      } else {
        new_array.put (old_array.item i) to i;
      };
    };
    new_array
  );
    
Section Public
  //variables
  + frame_img:INTEGER;
  
  //creation
  - create ki:KINECT :SELF<-
  ( + result:SELF;
    result := clone;
    result.kinect_set ki;
    result
  );
  
  //graphics
  + load_to_pen pen:PEN <- ( "'load_to_pen' function not defined\n".print; );
  + draw pen:PEN <- ( draw pen to (0,0); );
  + update <- ( PEN.update_image frame_img id image; );
  + img_write <-
  ( "'img_write' function not defined\nFrame is a generic object, pleasse create a specific type of frame\n".print; );
  
  
  // Main functions to call for quick use
  - picture_it <-
  ( "'picture_it' non defini\n".print; );
  
  - stream_it <-
  ( "'stream_it' non defini\n".print; );
  
