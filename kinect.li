Section Header
  + name := KINECT;
  - external := `
#include <libfreenect2/libfreenect2.hpp>
#include <libfreenect2/frame_listener_impl.h>
#include <libfreenect2/registration.h>
#include <libfreenect2/packet_pipeline.h>
#include <libfreenect2/logger.h>

#include <iostream>
#include <fstream>
#include <cstdlib>

libfreenect2::Freenect2 freenect2;
libfreenect2::Freenect2Device *dev = 0;
libfreenect2::PacketPipeline *pipeline = 0;

libfreenect2::SyncMultiFrameListener listener(7);   //enum Type { Color = 1, Ir = 2, Depth = 4 }
libfreenect2::FrameMap frames;

libfreenect2::Registration* registration;
`;

Section Inherit
  - parent_constant_pen:CONSTANT_PEN := CONSTANT_PEN;  
  - parent_paper:PAPER := PAPER;
  
Section Private
  - serial_number:NATIVE_ARRAY CHARACTER := "138898540347".to_external; //serial number of my kinect
  - framecount:UINTEGER;
  - framemax:UINTEGER;
  - protonect_shutdown:BOOLEAN;
  - enable_rgb:BOOLEAN;
  - enable_depth:BOOLEAN;
  - frame_obj:FRAME;
  
Section Public
  + frame_img:INTEGER := -1;
  
  - init_kinect type:INTEGER <-
  ( + serial:NATIVE_ARRAY CHARACTER;
    serial := serial_number;
    
    (type & 1 = 1).if {
      enable_rgb := TRUE;
    };
    (type & 2 = 2).if {
      enable_depth := TRUE;
    };
    (type & 4 = 4).if {
      enable_depth := TRUE;
    };
    (type & 8 = 8).if {
      enable_depth := TRUE;
    };` 
#ifdef LIBFREENECT2_WITH_OPENGL_SUPPORT
    if(!pipeline)
      pipeline = new libfreenect2::OpenGLPacketPipeline();
#else`;
    "OpenGL pipeline is not supported!\n".print;
    `
#endif
    
    if(freenect2.enumerateDevices() == 0) {`;
      "no device connected!\n".print;
      `return -1;
    }
    
    if(pipeline) {
      dev = freenect2.openDevice(@serial, pipeline);
    } else {
      dev = freenect2.openDevice(@serial);
    }
    
    if(dev == 0) {`;
      "failure opening device!\n".print;
      `return -1;
    }

    dev->setColorFrameListener(&listener);
    dev->setIrAndDepthFrameListener(&listener);
    `;
  );
  
  - start_kinect <-
  ( + rgb,depth:BOOLEAN;
    rgb := enable_rgb;
    depth := enable_depth;
    `if (@rgb || @depth) {
      if (!dev->start())
      return -1;
    } else {
      printf("All frame streams disabled !\n");
    }
    
    std::cout << "device serial: " << dev->getSerialNumber() << std::endl;
    std::cout << "device firmware: " << dev->getFirmwareVersion() << std::endl;
    
    registration = new libfreenect2::Registration(dev->getIrCameraParams(), dev->getColorCameraParams());
    //libfreenect2::Frame undistorted(512, 424, 4), registered(512, 424, 4);
    `;
  );
  
  - shut_kinect <-
  ( `dev->stop();
    dev->close();
    delete registration;`
  );
  
  + main <-
  ( + temp :FRAME_REGISTERED;
    temp := FRAME_REGISTERED.create Self;
    temp.picture_it;
  );
