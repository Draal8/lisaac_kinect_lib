Section Header
  + name := KINECT;
  - external := `
#include <libfreenect2/libfreenect2.hpp>
#include <libfreenect2/frame_listener_impl.h>
#include <libfreenect2/registration.h>
#include <libfreenect2/packet_pipeline.h>
#include <libfreenect2/logger.h>

#include <iostream>
#include <fstream>
#include <cstdlib>

#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <string.h>
#include <unistd.h>

libfreenect2::Freenect2 freenect2;
libfreenect2::Freenect2Device *dev = 0;
libfreenect2::PacketPipeline *pipeline = 0;

libfreenect2::SyncMultiFrameListener listener(1);   //enum Type { Color = 1, Ir = 2, Depth = 4 }
libfreenect2::FrameMap frames;

libfreenect2::Registration* registration;
`;

Section Inherit
  - parent_constant_pen:CONSTANT_PEN := CONSTANT_PEN;  
  - parent_paper:PAPER := PAPER;
  
Section Private
  - framecount:UINTEGER;
  - framemax:UINTEGER;
  - protonect_shutdown:BOOLEAN;
  - enable_rgb:BOOLEAN := TRUE;
  - enable_depth:BOOLEAN;
  
  - draw_mouse p:PEN <-
  ( + t:TOUCH;
    p.begin_path;    
    (p.touch.lower).to (p.touch.upper) do { i:INTEGER;
      t := p.touch.item i;      
      (t.is_pressed).if {                
        p.circle (t.x,t.y) radius 100;
        p.stroke_color (COLOR.rgb (255,255,255));
        p.stroke;
      };    
    };
  );
  
  - frame:INTEGER := -1;
  
Section Public
  - draw pen:PEN to (x,y:REAL_32) <- (deferred;);
  
  - draw pen:PEN <- ( draw pen to (0,0); );
  
  - update <- ( PEN.update_image frame id image; );
  
  - init_frames <-
  (
    `libfreenect2::Frame *rgb = frames[libfreenect2::Frame::Color];
    libfreenect2::Frame *ir = frames[libfreenect2::Frame::Ir];
    libfreenect2::Frame *depth = frames[libfreenect2::Frame::Depth]`;
  );
  
  - use_pen pen:PEN to (x,y:REAL_32) size size:INTEGER <-
  (
    + p:PAINT;
    + imgw,imgh:INTEGER;
    + iw, ih:REAL_32;
    draw_mouse pen;
    (frame != -1).if {
      (imgw,imgh) := pen.image_size frame;
      (iw, ih) := (size, size * imgh / imgw);
      p := PAINT.create_pattern (x,y) size (iw,ih) img_id frame angle 0 alpha 1;
      pen.begin_path;
      pen.rect (x,y) size (imgw,imgh);
      pen.fill_paint p;
      pen.fill;
      p.free;
    };
  );
  
  + stream_it <-
  (
    + serial :NATIVE_ARRAY CHARACTER;
    + pen :PEN;
    + rgb, depth :BOOLEAN;
    PAPER.make (1366,768) title "Test Img";
    PAPER.set_animation 1;
    pen := PAPER.loc_pen;
    serial := "138898540347".to_external;
    rgb := enable_rgb;
    depth := enable_depth;
    
    draw to <- 
    ( //+ p:PAINT;
      //+ imgw,imgh:INTEGER;
      //+ iw, ih:REAL_32;
      + size:INTEGER;
      + rgb, depth :BOOLEAN;
      rgb := enable_rgb;
      depth := enable_depth;
      
      ((framemax = 0) | (framecount < framemax)).if {
        `if (!listener.waitForNewFrame(frames, 10*1000)) { // 10 seconds`;
          "timeout!".print;
          `return -1;
        }
        libfreenect2::Frame *rgb = frames[libfreenect2::Frame::Color];
        libfreenect2::Frame *ir = frames[libfreenect2::Frame::Ir];
        libfreenect2::Frame *depth = frames[libfreenect2::Frame::Depth]`;
        rgb.if {
          (frame = -1).if {
            frame := pen.create_image_bgra (`rgb->data`:NATIVE_ARRAY UINTEGER_8) size (1920,1080) flags 0;
          } else {
            PEN.update_image_bgra (`rgb->data`:NATIVE_ARRAY UINTEGER_8) id frame;
          };
        };
        framecount := framecount + 1;
        `
        listener.release(frames);
        } else {
        dev->stop();
        dev->close();
        delete registration;
        }`
      };
      size := 1280;
      use_pen pen to (x,y) size size;
      /* draw_mouse pen;
      (frame != -1).if {
        (imgw,imgh) := pen.image_size frame;
        (iw, ih) := (size, size * imgh / imgw);
        p := PAINT.create_pattern (x,y) size (iw,ih) img_id frame angle 0 alpha 1;
        pen.begin_path;
        pen.rect (x,y) size (imgw,imgh);
        pen.fill_paint p;
        pen.fill;
        p.free;
      }; */
    );
    `
#ifdef LIBFREENECT2_WITH_OPENGL_SUPPORT
    if(!pipeline)
      pipeline = new libfreenect2::OpenGLPacketPipeline();
#else`;
    "OpenGL pipeline is not supported!\n".print;
    `
#endif
    
    if(freenect2.enumerateDevices() == 0) {`;
      "no device connected!\n".print;
      `return -1;
    }
    
    if(pipeline) {
      dev = freenect2.openDevice(@serial, pipeline);
    } else {
      dev = freenect2.openDevice(@serial);
    }
    
    if(dev == 0) {`;
      "failure opening device!\n".print;
      `return -1;
    }

    dev->setColorFrameListener(&listener);
    dev->setIrAndDepthFrameListener(&listener);
    
    if (@rgb && @depth) {
      if (!dev->start())
      return -1;
    } else {
      if (!dev->startStreams(@rgb, @depth))
      return -1;
    }
    
    std::cout << "device serial: " << dev->getSerialNumber() << std::endl;
    std::cout << "device firmware: " << dev->getFirmwareVersion() << std::endl;
    
    registration = new libfreenect2::Registration(dev->getIrCameraParams(), dev->getColorCameraParams());
    libfreenect2::Frame undistorted(512, 424, 4), registered(512, 424, 4);
    `;
    PAPER.run Self;
  );
  
  + main <-
  (
    stream_it;
  );
